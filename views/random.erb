<% if @meme && @meme.is_a?(Hash) && @meme["title"] %>
<div class="meme-container">
  <h2 id="meme-title"><%= @meme["title"] || "Untitled Meme" %></h2>
  <p id="meme-subreddit" class="meme-subtitle"><%= @meme["subreddit"] || "Unknown Subreddit" %></p>

  <img
    id="meme-img"
    src="<%= @image_src || '/images/funny1.jpeg' %>"
    alt="<%= @meme["title"] || 'Meme Image' %>"
    onerror="this.src='/images/funny1.jpeg';"
  >

  <% likes_count = (@likes.to_i rescue 0) %>
  <p>Likes: <span class="meme-likes"><%= likes_count > 0 ? likes_count : "" %></span></p>

  <form class="like-form" action="/like" method="POST" style="margin-top:10px;">
    <input type="hidden" name="url" value="<%= @image_src || '' %>">
    <button
      type="submit"
      class="<%= 'liked' if session[:liked_memes]&.include?(@image_src) %>"
    >
      <%= session[:liked_memes]&.include?(@image_src) ? "💔 Unlike" : "❤️ Like" %>
    </button>
  </form>

</div>
<% else %>
<p style="text-align: center; margin-top: 50px; font-size: 18px;">Loading memes...</p>
<% end %>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const memeImg = document.getElementById("meme-img");
  const memeTitle = document.getElementById("meme-title");
  const memeSub = document.getElementById("meme-subreddit");
  const likesSpan = document.querySelector(".meme-likes");
  const likeButton = document.querySelector("form.like-form button");
  const form = document.querySelector("form.like-form");

  // Guard against null elements
  if (!memeImg || !memeTitle || !memeSub || !likesSpan || !likeButton || !form) {
    return;
  }

  let historyStack = [];
  let currentMeme = {
    url: memeImg.src,
    title: memeTitle.innerText,
    subreddit: memeSub.innerText,
    likes: parseInt(likesSpan.innerText) || 0
  };

  // Safe session store for liked memes
  if (!window.sessionLikedMemes) window.sessionLikedMemes = <%= (session[:liked_memes] || []).to_json %>;

  const updateMeme = (meme) => {
    memeImg.src = meme.url || '/images/funny1.jpeg';
    memeImg.alt = meme.title || "Meme Image";
    memeTitle.innerText = meme.title || "Untitled Meme";
    memeSub.innerText = meme.subreddit || "Unknown Subreddit";
    form.querySelector("input[name='url']").value = meme.url || "";
    likesSpan.textContent = meme.likes > 0 ? meme.likes : "";
    
    if (window.sessionLikedMemes.includes(meme.url)) {
      likeButton.textContent = "💔 Unlike";
      likeButton.classList.add("liked");
    } else {
      likeButton.textContent = "❤️ Like";
      likeButton.classList.remove("liked");
    }

    currentMeme = meme;
  };

  const fetchMeme = async (direction) => {
    historyStack.push(currentMeme);

    try {
      const res = await fetch(`/random.json`);
      if (!res.ok) throw new Error("Failed to fetch meme");
      const meme = await res.json();
      // Ensure likes is numeric
      meme.likes = parseInt(meme.likes) || 0;
      updateMeme(meme);
    } catch (err) {
      console.error(err);
      alert("Could not load a new meme. Try again!");
    }
  };

  form.addEventListener("submit", async e => {
    e.preventDefault();
    const memeUrl = form.querySelector("input[name='url']").value;

    try {
      const res = await fetch(form.action, {
        method: "POST",
        body: new URLSearchParams({ url: memeUrl }),
        headers: { "Accept": "application/json" }
      });
      const data = await res.json();

      if (data.liked) {
        likeButton.textContent = "💔 Unlike";
        likeButton.classList.add("liked");
        if (!window.sessionLikedMemes.includes(memeUrl))
          window.sessionLikedMemes.push(memeUrl);
      } else {
        likeButton.textContent = "❤️ Like";
        likeButton.classList.remove("liked");
        window.sessionLikedMemes = window.sessionLikedMemes.filter(u => u !== memeUrl);
      }

      likesSpan.textContent = data.likes > 0 ? data.likes : "";
    } catch (err) {
      console.error(err);
      alert("Could not update like — please try again.");
    }
  });

  document.addEventListener("keydown", e => {
    if ((e.code === "Space" || e.key === " ") && document.activeElement.tagName !== "INPUT") {
      e.preventDefault();
      fetchMeme("next");
    }
  });
});
</script>
