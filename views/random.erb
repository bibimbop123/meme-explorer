<% if @meme %>
<div class="meme-container">
  <h2 id="meme-title"><%= @meme["title"] %></h2>
  <p id="meme-subreddit" class="meme-subtitle"><%= @meme["subreddit"] %></p>

  <img id="meme-img" src="<%= @image_src %>" alt="<%= @meme["title"] %>">

  <% result = DB.execute("SELECT likes FROM meme_stats WHERE url = ?", [@image_src]).first %>
  <% @likes = result ? result["likes"] : 0 %>

  <form class="like-form" action="/like" method="POST" style="margin-top:10px;">
    <input type="hidden" name="url" value="<%= @image_src %>">
    <button type="submit" class="<%= 'liked' if session[:liked_memes]&.include?(@image_src) %>">
      <%= session[:liked_memes]&.include?(@image_src) ? "üíî Unlike" : "‚ù§Ô∏è Like" %>
    </button>
    <span class="meme-likes"><%= @likes %></span>
  </form>

  <div class="nav-buttons">
    <button id="prev-btn">‚¨ÖÔ∏è Previous</button>
    <button id="next-btn">Next ‚û°Ô∏è</button>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const form = document.querySelector("form.like-form");
  const memeImg = document.getElementById("meme-img");
  const memeTitle = document.getElementById("meme-title");
  const memeSub = document.getElementById("meme-subreddit");
  const likesSpan = form.querySelector(".meme-likes");
  const likeButton = form.querySelector("button");

  const fetchMeme = async (direction) => {
    try {
      const res = await fetch(`/random.json?direction=${direction}`);
      const meme = await res.json();

      memeImg.src = meme.url;
      memeImg.alt = meme.title;
      memeTitle.innerText = meme.title;
      memeSub.innerText = meme.subreddit;

      form.querySelector("input[name='url']").value = meme.url;
      likeButton.classList.remove("liked");
      likeButton.textContent = "‚ù§Ô∏è Like";
      likesSpan.textContent = meme.likes || 0;
    } catch (err) {
      console.error("Failed to fetch meme:", err);
    }
  };

  form.addEventListener("submit", async e => {
    e.preventDefault();
    try {
      const res = await fetch(form.action, {
        method: "POST",
        body: new URLSearchParams(new FormData(form)),
        headers: { "Accept": "application/json" }
      });
      const data = await res.json();
      if (data.liked) {
        likeButton.textContent = "üíî Unlike";
        likeButton.classList.add("liked");
      } else {
        likeButton.textContent = "‚ù§Ô∏è Like";
        likeButton.classList.remove("liked");
      }
      likesSpan.textContent = data.likes;
    } catch (err) {
      alert("Could not update like ‚Äî please try again.");
      console.error(err);
    }
  });

  document.getElementById("prev-btn").addEventListener("click", () => fetchMeme("prev"));
  document.getElementById("next-btn").addEventListener("click", () => fetchMeme("next"));

  document.addEventListener("keydown", e => {
    if ((e.code === "Space" || e.key === " ") && document.activeElement.tagName !== "INPUT") {
      e.preventDefault();
      fetchMeme("next");
    }
  });
});
</script>
<% else %>
<p>No memes found!</p>
<% end %>
